import logging
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, ContextTypes, filters

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Time limit for questions (in seconds)
QUESTION_TIME_LIMIT = 30

# Dictionary to store user scores
user_scores = {}

# Define scenarios
SCENARIOS = {
    "start": {
        "title": "–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∏–π —Ç–µ—Å—Ç: –¢–∏ –∑–º–æ–∂–µ—à –≤–∏–∂–∏—Ç–∏?",
        "description": "–í—ñ—Ç–∞—î–º–æ –≤ —Å–∏–º—É–ª—è—Ç–æ—Ä—ñ –≤–∏–∂–∏–≤–∞–Ω–Ω—è!\n–û–±–µ—Ä–∏ –æ–¥–∏–Ω –∑—ñ —Å—Ü–µ–Ω–∞—Ä—ñ—ó–≤ —ñ —Å–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —à–ª—è—Ö –¥–æ –≤–∏–∂–∏–≤–∞–Ω–Ω—è. –ù–∞–ø—Ä–∏–∫—ñ–Ω—Ü—ñ –æ—Ç—Ä–∏–º–∞—î—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
        "options": [
            ("üèúÔ∏è –ü—É—Å—Ç–µ–ª—è", "desert_1"),
            ("‚õ∞Ô∏è –ì–æ—Ä–∏", "mountain_1"),
            ("üåÜ –ê–ø–æ–∫–∞–ª—ñ–ø—Å–∏—Å", "apocalypse_1"),
            ("üå≤ –õ—ñ—Å", "forest_1"),
        ],
    },
    "desert_1": {
        "title": "–°—Ü–µ–Ω–∞—Ä—ñ–π: –¢–∏ –∑–∞–≥—É–±–∏–≤—Å—è –≤ –ø—É—Å—Ç–µ–ª—ñ",
        "description": "–¢–∏ –æ–ø–∏–Ω–∏–≤—Å—è –∑–æ–≤—Å—ñ–º –æ–¥–∏–Ω –ø–æ—Å–µ—Ä–µ–¥ –±–µ–∑–∫—Ä–∞–π–Ω—å–æ—ó —Ä–æ–∑–ø–µ—á–µ–Ω–æ—ó –ø—É—Å—Ç–µ–ª—ñ. –ù–∞–≤–∫–æ–ª–æ ‚Äî —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–æ–∫, —Å–ø–µ–∫–∞ —ñ –ø–æ–≤–Ω–∞ –Ω–µ–≤—ñ–¥–æ–º—ñ—Å—Ç—å, –∞ –≤–∏–∂–∏—Ç–∏ –º–æ–∂–Ω–∞ –ª–∏—à–µ –ø—Ä–∏–π–º–∞—é—á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è.",
        "question": "–ö—Ä–æ–∫ 1: –©–æ —Ç–∏ —Ä–æ–±–∏—à –ø–µ—Ä—à–∏–º?",
        "options": [
            ("A) –ô–¥–µ—à –≤ –æ–¥–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É", "desert_1_wrong"),
            ("–ë) –•–æ–≤–∞—î—à—Å—è –≤ —Ç—ñ–Ω—å", "desert_2"),
            ("–í) –ö–ª–∏—á–µ—à –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É", "desert_1_wrong"),
        ],
        "explanation": "–£ –ø—É—Å—Ç–µ–ª—ñ –≥–æ–ª–æ–≤–Ω–∞ –Ω–µ–±–µ–∑–ø–µ–∫–∞ ‚Äì —Å–ø–µ–∫–∞ –π –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω–Ω—è. –¢—Ä–µ–±–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é —ñ —á–µ–∫–∞—Ç–∏ –≤–µ—á–æ—Ä–∞."
    },
    "desert_1_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è —É –ø—É—Å—Ç–µ–ª—ñ. –°–ø–µ–∫–∞ —Ç–∞ –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω–Ω—è –º–æ–∂—É—Ç—å —à–≤–∏–¥–∫–æ –≤–∏—Å–Ω–∞–∂–∏—Ç–∏ —Ç–≤–æ—ó —Å–∏–ª–∏.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "desert_1"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "desert_2": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–¢–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–∏—Ä—ñ—à–∏–≤ –∑–±–µ—Ä–µ–≥—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é.",
        "question": "–ö—Ä–æ–∫ 2: –£ —Ç–µ–±–µ —î –ø—ñ–≤–ø–ª—è—à–∫–∏ –≤–æ–¥–∏. –Ø–∫ —Ç–∏ —ó—ó –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—à?",
        "options": [
            ("A) –í–∏–ø–∏–≤–∞—î—à –æ–¥—Ä–∞–∑—É", "desert_2_wrong"),
            ("–ë) –ü'—î—à –ø–æ—Ç—Ä–æ—Ö—É", "desert_3"),
            ("–í) –ó–∞–ª–∏–≤–∞—î—à –Ω–∞ –≥–æ–ª–æ–≤—É", "desert_2_wrong"),
        ],
        "explanation": "–í–∞–∂–ª–∏–≤–æ —É–Ω–∏–∫–∞—Ç–∏ –∑–Ω–µ–≤–æ–¥–Ω–µ–Ω–Ω—è, —Ç–æ–º—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –ø–∏—Ç–∏ —Ä–æ–∑—É–º–Ω–æ."
    },
    "desert_2_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω–æ–≥–æ –∑–∞–ø–∞—Å—É –≤–æ–¥–∏ —É –ø—É—Å—Ç–µ–ª—ñ.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "desert_2"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "desert_3": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–ï–∫–æ–Ω–æ–º–Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–æ–¥–∏ –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –≤–∏–∂–∏—Ç–∏ –¥–æ–≤—à–µ.",
        "question": "–ö—Ä–æ–∫ 3: –£–Ω–æ—á—ñ –¥—É–∂–µ —Ö–æ–ª–æ–¥–Ω–æ. –©–æ —Ä–æ–±–∏—à?",
        "options": [
            ("A) –ü–∞–ª–∏—à –≤—Å–µ –¥–ª—è —Ç–µ–ø–ª–∞", "desert_3_wrong"),
            ("–ë) –ó–∞—Ä–∏–≤–∞—î—à—Å—è –≤ –ø—ñ—Å–æ–∫", "desert_result"),
            ("–í) –ô–¥–µ—à –¥–∞–ª—ñ –≤–Ω–æ—á—ñ", "desert_3_wrong"),
        ],
        "explanation": "–ó–Ω–∏–∂–µ–Ω–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –≤–Ω–æ—á—ñ - —Ç–∏–ø–æ–≤–µ –¥–ª—è –ø—É—Å—Ç–µ–ª—ñ. –¢–µ–ø–ª–æ —Ç—ñ–ª–∞ —Ç—Ä–µ–±–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏."
    },
    "desert_3_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –≤–∏–∂–∏–≤–∞–Ω–Ω—è —Ö–æ–ª–æ–¥–Ω–æ—ó –Ω–æ—á—ñ —É –ø—É—Å—Ç–µ–ª—ñ.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "desert_3"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "desert_result": {
        "title": "–†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–∂–∏–≤–∞–Ω–Ω—è –≤ –ø—É—Å—Ç–µ–ª—ñ",
        "description": "–í—ñ—Ç–∞—î–º–æ! –¢–∏ –Ω–∞–±—Ä–∞–≤ 3 –±–∞–ª–∏: –≤–∏–∂–∏–≤, –¥–æ—á–µ–∫–∞–≤—Å—è —Ä—è—Ç—É–≤–∞–ª—å–Ω–∏–∫—ñ–≤.\n\n–¢–∏ –∑—Ä–æ–±–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫—Ä–æ–∫–∏:\n1. –ó–±–µ—Ä—ñ–≥ –µ–Ω–µ—Ä–≥—ñ—é, –ø–µ—Ä–µ—á–µ–∫–∞–≤—à–∏ —Å–ø–µ–∫—É –≤ —Ç—ñ–Ω—ñ\n2. –†–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –æ–±–º–µ–∂–µ–Ω—ñ –∑–∞–ø–∞—Å–∏ –≤–æ–¥–∏\n3. –ó–∞—Ö–∏—Å—Ç–∏–≤—Å—è –≤—ñ–¥ –Ω—ñ—á–Ω–æ–≥–æ —Ö–æ–ª–æ–¥—É",
        "options": [
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
            ("üîÑ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", "desert_1"),
        ],
        "score": 3
    },
    
    # Mountain scenario
    "mountain_1": {
        "title": "–°—Ü–µ–Ω–∞—Ä—ñ–π: –¢–µ–±–µ –∑–∞–Ω–µ—Å–ª–æ —É –≥–æ—Ä–∞—Ö",
        "description": "–¢–∏ –∑–∞–≥—É–±–∏–≤—Å—è –≤ –≥–æ—Ä–∞—Ö –ø—ñ—Å–ª—è —Å–Ω—ñ–≥–æ–≤–æ—ó –±—É—Ä—ñ. –¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ –ª–æ–≤–∏—Ç—å, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî -5¬∞C. –¢–∏ –æ–¥—è–≥–Ω–µ–Ω–∏–π, –∞–ª–µ –±–µ–∑ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–≥–æ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è.",
        "question": "–ö—Ä–æ–∫ 1: –©–æ —Ä–æ–±–∏—à –ø–µ—Ä—à–∏–º?",
        "options": [
            ("A) –°–ø—É—Å–∫–∞—î—à—Å—è –≤ –¥–æ–ª–∏–Ω—É", "mountain_1_wrong"),
            ("–ë) –†–æ–±–∏—à —É–∫—Ä–∏—Ç—Ç—è", "mountain_2"),
            ("–í) –®—É–∫–∞—î—à —Å–∏–≥–Ω–∞–ª", "mountain_1_wrong"),
        ],
        "explanation": "–°–ø–µ—Ä—à—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ–ø–ª–æ —ñ –∑–∞—Ö–∏—Å—Ç–∏—Ç–∏—Å—è –≤—ñ–¥ –ø–µ—Ä–µ–æ—Ö–æ–ª–æ–¥–∂–µ–Ω–Ω—è."
    },
    "mountain_1_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è —É –≥–æ—Ä–∞—Ö –ø—Ä–∏ –Ω–∏–∑—å–∫—ñ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ñ.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "mountain_1"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "mountain_2": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–ø–ª–∞ - –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç —É —Ö–æ–ª–æ–¥–Ω–∏—Ö –≥–æ—Ä–∞—Ö.",
        "question": "–ö—Ä–æ–∫ 2: –£ —Ç–µ–±–µ —î –±–∞—Ç–æ–Ω—á–∏–∫ —ñ —Ç—Ä–æ—Ö–∏ –≤–æ–¥–∏. –Ø–∫ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏—à?",
        "options": [
            ("A) –á—Å–∏ –π –ø'—î—à –æ–¥—Ä–∞–∑—É", "mountain_2_wrong"),
            ("–ë) –ó–∞–ª–∏—à–∞—î—à –Ω–∞ –ø–æ—Ç—ñ–º", "mountain_2_wrong"),
            ("–í) –á—Å–∏ —ñ –ø'—î—à –ø–æ—Ç—Ä–æ—Ö—É", "mountain_3"),
        ],
        "explanation": "–û—Ä–≥–∞–Ω—ñ–∑–º –ø–æ—Ç—Ä–µ–±—É—î –µ–Ω–µ—Ä–≥—ñ—ó, –∞–ª–µ —Ä—ñ–∑–∫–∏–π —Å–ø–ª–µ—Å–∫ –∫–∞–ª–æ—Ä—ñ–π —É —Å—Ç—Ä–µ—Å—ñ ‚Äì –ø–æ–≥–∞–Ω–∞ —ñ–¥–µ—è."
    },
    "mountain_2_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –æ–±–º–µ–∂–µ–Ω–∏—Ö –∑–∞–ø–∞—Å—ñ–≤ —É –≥–æ—Ä–∞—Ö.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "mountain_2"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "mountain_3": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–µ —Å–ø–æ–∂–∏–≤–∞–Ω–Ω—è —ó–∂—ñ —Ç–∞ –≤–æ–¥–∏ –¥–æ–ø–æ–º–æ–∂–µ –ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –µ–Ω–µ—Ä–≥—ñ—é.",
        "question": "–ö—Ä–æ–∫ 3: –¢–∏ –±–∞—á–∏—à —É—â–µ–ª–∏–Ω—É. –©–æ —Ä–æ–±–∏—à?",
        "options": [
            ("A) –°–ø—É—Å–∫–∞—î—à—Å—è –¥–æ —Ä—ñ—á–∫–∏", "mountain_3_wrong"),
            ("–ë) –®—É–∫–∞—î—à —ñ–Ω—à–∏–π —à–ª—è—Ö", "mountain_result"),
            ("–í) –ó–∞–ª–∏—à–∞—î—à—Å—è –Ω–∞ –º—ñ—Å—Ü—ñ", "mountain_3_wrong"),
        ],
        "explanation": "–†–µ–ª—å—î—Ñ —É –≥–æ—Ä–∞—Ö –Ω–µ–±–µ–∑–ø–µ—á–Ω–∏–π. –°–ø—É—Å–∫ —É –Ω–µ–∑–Ω–∞–π–æ–º—É —É—â–µ–ª–∏–Ω—É –±–µ–∑ –µ–∫—ñ–ø—ñ—Ä—É–≤–∞–Ω–Ω—è ‚Äì —Ä–∏–∑–∏–∫–æ–≤–∞–Ω–∏–π."
    },
    "mountain_3_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ–±–µ–∑–ø–µ—á–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è —É –≥—ñ—Ä—Å—å–∫–∏—Ö —É–º–æ–≤–∞—Ö.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "mountain_3"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "mountain_result": {
        "title": "–†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–∂–∏–≤–∞–Ω–Ω—è –≤ –≥–æ—Ä–∞—Ö",
        "description": "–í—ñ—Ç–∞—î–º–æ! –¢–∏ –Ω–∞–±—Ä–∞–≤ 3 –±–∞–ª–∏: –≤–∏–∂–∏–≤ —É –≥—ñ—Ä—Å—å–∫–∏—Ö —É–º–æ–≤–∞—Ö.\n\n–¢–∏ –∑—Ä–æ–±–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫—Ä–æ–∫–∏:\n1. –ó–±–µ—Ä—ñ–≥ —Ç–µ–ø–ª–æ, —Å—Ç–≤–æ—Ä–∏–≤—à–∏ —É–∫—Ä–∏—Ç—Ç—è\n2. –†–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ —Ä–æ–∑–ø–æ–¥—ñ–ª–∏–≤ –∑–∞–ø–∞—Å–∏ —ó–∂—ñ —Ç–∞ –≤–æ–¥–∏\n3. –û–±—Ä–∞–≤ –±–µ–∑–ø–µ—á–Ω–∏–π —à–ª—è—Ö —Ä—É—Ö—É",
        "options": [
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
            ("üîÑ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", "mountain_1"),
        ],
        "score": 3
    },
    
    # Apocalypse scenario
    "apocalypse_1": {
        "title": "–°—Ü–µ–Ω–∞—Ä—ñ–π: –ê–ø–æ–∫–∞–ª—ñ–ø—Å–∏—Å –±–µ–∑ —Å–≤—ñ—Ç–ª–∞",
        "description": "–£ –º—ñ—Å—Ç—ñ —Å—Ç–∞–ª–∞—Å—è –∞–≤–∞—Ä—ñ—è. –ù–µ–º–∞—î –µ–ª–µ–∫—Ç—Ä–∏–∫–∏, –∑–≤'—è–∑–∫—É, –ø–∞–Ω—ñ–∫–∞. –¢–∏ –≤–¥–æ–º–∞, –≤ —Ç–µ–±–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∑–∞–ø–∞—Å–∏.",
        "question": "–ö—Ä–æ–∫ 1: –©–æ —Ä–æ–±–∏—à –ø–µ—Ä—à–∏–º?",
        "options": [
            ("A) –ô–¥–µ—à –¥–æ –º–∞–≥–∞–∑–∏–Ω—É", "apocalypse_1_wrong"),
            ("–ë) –ü–µ—Ä–µ–≤—ñ—Ä—è—î—à –∑–∞–ø–∞—Å–∏", "apocalypse_2"),
            ("–í) –ü–∏—à–µ—à –¥—Ä—É–∑—è–º", "apocalypse_1_wrong"),
        ],
        "explanation": "–£ —Ä–∞–∑—ñ –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó –∫—Ä–∞—â–µ —É–Ω–∏–∫–∞—Ç–∏ –Ω–∞—Ç–æ–≤–ø—É. –û—Ü—ñ–Ω–∫–∞ –∑–∞–ø–∞—Å—ñ–≤ ‚Äì –ø–µ—Ä—à–∏–π –∫—Ä–æ–∫."
    },
    "apocalypse_1_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è —É —Å–∏—Ç—É–∞—Ü—ñ—ó –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–∏–∫–∏.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "apocalypse_1"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "apocalypse_2": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–ó–Ω–∞—Ç–∏, —â–æ –≤ —Ç–µ–±–µ —î, –¥–æ–ø–æ–º–æ–∂–µ —Å–ø–ª–∞–Ω—É–≤–∞—Ç–∏ –ø–æ–¥–∞–ª—å—à—ñ –¥—ñ—ó.",
        "question": "–ö—Ä–æ–∫ 2: –£ —Ç–µ–±–µ —î —Ç—Ä–æ—Ö–∏ –≤–æ–¥–∏. –Ø–∫ –¥—ñ—î—à?",
        "options": [
            ("A) –í–∞—Ä–∏—à –≤–æ–¥—É –∑ –∫—Ä–∞–Ω–∞", "apocalypse_3"),
            ("–ë) –ü'—î—à –∑–∞–ø–∞—Å–∏", "apocalypse_2_wrong"),
            ("–í) –ü'—î—à –Ω–∞–ø–æ—ó", "apocalypse_2_wrong"),
        ],
        "explanation": "–ö–∏–ø'—è—Ç—ñ–Ω–Ω—è ‚Äì –±–∞–∑–æ–≤–∏–π —Å–ø–æ—Å—ñ–± –∑–Ω–µ–∑–∞—Ä–∞–∂–µ–Ω–Ω—è –≤–æ–¥–∏. –í–∞—Ä—Ç–æ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏, –ø–æ–∫–∏ —î –≥–∞–∑/—Ç–µ–ø–ª–æ."
    },
    "apocalypse_2_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤–æ–¥–∏ —É –Ω–∞–¥–∑–≤–∏—á–∞–π–Ω—ñ–π —Å–∏—Ç—É–∞—Ü—ñ—ó.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "apocalypse_2"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "apocalypse_3": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–ö–∏–ø'—è—Ç—ñ–Ω–Ω—è –∑–Ω–µ–∑–∞—Ä–∞–∂—É—î –≤–æ–¥—É —ñ —Ä–æ–±–∏—Ç—å —ó—ó –±–µ–∑–ø–µ—á–Ω–æ—é –¥–ª—è –ø–∏—Ç—Ç—è.",
        "question": "–ö—Ä–æ–∫ 3: –ù–∞—Å—Ç—É–ø–Ω–∞ –Ω—ñ—á. –£ –∫–≤–∞—Ä—Ç–∏—Ä—ñ —Ö–æ–ª–æ–¥–Ω–æ. –¢–≤–æ—ó –¥—ñ—ó:",
        "options": [
            ("A) –£—Ç–µ–ø–ª—é—î—à –≤—ñ–∫–Ω–∞", "apocalypse_result"),
            ("–ë) –°–ø–∏—à —É –≤–∞–Ω–Ω—ñ–π", "apocalypse_3_wrong"),
            ("–í) –ô–¥–µ—à –¥–æ –¥—Ä—É–∑—ñ–≤", "apocalypse_3_wrong"),
        ],
        "explanation": "–¢–µ–ø–ª–æ ‚Äì –≥–æ–ª–æ–≤–Ω–µ. –ú–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ ¬´–ø–µ—á–µ—Ä—É –∑ –∫–æ–≤–¥—Ä¬ª —ñ –∑–±–µ—Ä–µ–≥—Ç–∏ —Ç–µ–ø–ª–æ —Ç—ñ–ª–∞."
    },
    "apocalypse_3_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ç–µ–ø–ª–∞ –ø—Ä–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ –æ–ø–∞–ª–µ–Ω–Ω—è.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "apocalypse_3"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "apocalypse_result": {
        "title": "–†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–∂–∏–≤–∞–Ω–Ω—è –≤ –±–ª–µ–∫–∞—É—Ç",
        "description": "–í—ñ—Ç–∞—î–º–æ! –¢–∏ –Ω–∞–±—Ä–∞–≤ 3 –±–∞–ª–∏: —É—Å–ø—ñ—à–Ω–æ –ø–µ—Ä–µ–∂–∏–≤ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –µ–ª–µ–∫—Ç—Ä–∏–∫–∏.\n\n–¢–∏ –∑—Ä–æ–±–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫—Ä–æ–∫–∏:\n1. –û—Ü—ñ–Ω–∏–≤ —Å–≤–æ—ó –∑–∞–ø–∞—Å–∏ –ø–µ—Ä–µ–¥ —Ç–∏–º, —è–∫ –¥—ñ—è—Ç–∏\n2. –ü–æ–¥–±–∞–≤ –ø—Ä–æ –∑–∞–ø–∞—Å –±–µ–∑–ø–µ—á–Ω–æ—ó –ø–∏—Ç–Ω–æ—ó –≤–æ–¥–∏\n3. –ó–±–µ—Ä—ñ–≥ —Ç–µ–ø–ª–æ –≤ –ø–æ–º–µ—à–∫–∞–Ω–Ω—ñ",
        "options": [
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
            ("üîÑ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", "apocalypse_1"),
        ],
        "score": 3
    },
    
    # Forest scenario
    "forest_1": {
        "title": "–°—Ü–µ–Ω–∞—Ä—ñ–π: –¢–∏ –∑–∞–≥—É–±–∏–≤—Å—è –≤ –ª—ñ—Å—ñ",
        "description": "–ü—ñ–¥ —á–∞—Å –ø—Ä–æ–≥—É–ª—è–Ω–∫–∏ —Ç–∏ –≤—ñ–¥—ñ–π—à–æ–≤ –≤—ñ–¥ –≥—Ä—É–ø–∏ —ñ –∑–∞–≥—É–±–∏–≤—Å—è. –°–∫–æ—Ä–æ –≤–µ—á—ñ—Ä, —É —Ç–µ–±–µ –ª–∏—à–µ –ª–µ–≥–∫–∞ –∫—É—Ä—Ç–∫–∞ —ñ –ø—ñ–≤–ø–ª—è—à–∫–∏ –≤–æ–¥–∏.",
        "question": "–ö—Ä–æ–∫ 1: –©–æ —Ä–æ–±–∏—à –ø–µ—Ä—à–∏–º?",
        "options": [
            ("A) –ü—Ä–æ–¥–æ–≤–∂—É—î—à —Ä—É—Ö–∞—Ç–∏—Å—å", "forest_1_wrong"),
            ("–ë) –í–∏–∑–Ω–∞—á–∞—î—à –º—ñ—Å—Ü–µ", "forest_2"),
            ("–í) –ö–ª–∏—á–µ—à –Ω–∞ –¥–æ–ø–æ–º–æ–≥—É", "forest_1_wrong"),
        ],
        "explanation": "–ö–æ–ª–∏ –∑–∞–±–ª—É–∫–∞–≤, –≤–∞–∂–ª–∏–≤–æ –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è —Ç–∞ –∑–æ—Ä—ñ—î–Ω—Ç—É–≤–∞—Ç–∏—Å—è, —â–æ–± –Ω–µ –≤—ñ–¥–¥–∞–ª—è—Ç–∏—Å—è —â–µ –±—ñ–ª—å—à–µ."
    },
    "forest_1_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –º–æ–∂–µ –ª–∏—à–µ –ø–æ–≥—ñ—Ä—à–∏—Ç–∏ —Å–∏—Ç—É–∞—Ü—ñ—é –≤ –ª—ñ—Å—ñ.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "forest_1"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "forest_2": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–¢–∏ –∑—É–ø–∏–Ω–∏–≤—Å—è, —â–æ–± –Ω–µ –∑–∞–±–ª—É–∫–∞—Ç–∏ —â–µ –±—ñ–ª—å—à–µ.",
        "question": "–ö—Ä–æ–∫ 2: –ù–∞–±–ª–∏–∂–∞—î—Ç—å—Å—è –Ω—ñ—á. –¢–≤–æ—ó –¥—ñ—ó:",
        "options": [
            ("A) –®—É–∫–∞—î—à –¥–æ—Ä–æ–≥—É", "forest_2_wrong"),
            ("–ë) –†–æ–±–∏—à —É–∫—Ä–∏—Ç—Ç—è", "forest_3"),
            ("–í) –õ—ñ–∑–µ—à –Ω–∞ –¥–µ—Ä–µ–≤–æ", "forest_2_wrong"),
        ],
        "explanation": "–ù–æ—á—ñ–≤–ª—è –≤ –ª—ñ—Å—ñ –±–µ–∑ —É–∫—Ä–∏—Ç—Ç—è –Ω–µ–±–µ–∑–ø–µ—á–Ω–∞. –í–∞–∂–ª–∏–≤–æ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ —Ç–µ–ø–ª–æ —Ç–∞ –µ–Ω–µ—Ä–≥—ñ—é."
    },
    "forest_2_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–∫—Ä–∞—â–µ —Ä—ñ—à–µ–Ω–Ω—è –ø—Ä–∏ –Ω–∞—Å—Ç–∞–Ω–Ω—ñ —Ç–µ–º—Ä—è–≤–∏ –≤ –ª—ñ—Å—ñ.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "forest_2"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "forest_3": {
        "title": "–î–æ–±—Ä–µ —Ä—ñ—à–µ–Ω–Ω—è!",
        "description": "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ –Ω–æ—á—ñ–≤–ª—ñ –∑–±–µ—Ä–µ–∂–µ —Ç–≤–æ—ó —Å–∏–ª–∏ —Ç–∞ –∑–¥–æ—Ä–æ–≤'—è.",
        "question": "–ö—Ä–æ–∫ 3: –í—Ä–∞–Ω—Ü—ñ —Ç–∏ –∑–Ω–∞–π—à–æ–≤ —Å—Ç—Ä—É–º–æ–∫. –©–æ —Ä–æ–±–∏—à?",
        "options": [
            ("A) –ü'—î—à –≤–æ–¥—É –æ–¥—Ä–∞–∑—É", "forest_3_wrong"),
            ("–ë) –ö–∏–ø'—è—Ç–∏—à –≤–æ–¥—É", "forest_result"),
            ("–í) –ô–¥–µ—à –≤–∑–¥–æ–≤–∂ —Å—Ç—Ä—É–º–∫–∞", "forest_3_wrong"),
        ],
        "explanation": "–í–æ–¥–∞ –∑ –ø—Ä–∏—Ä–æ–¥–Ω–∏—Ö –¥–∂–µ—Ä–µ–ª –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ–±–µ–∑–ø–µ—á–Ω—ñ –º—ñ–∫—Ä–æ–æ—Ä–≥–∞–Ω—ñ–∑–º–∏. –ö–∏–ø'—è—Ç—ñ–Ω–Ω—è - –Ω–∞–π–Ω–∞–¥—ñ–π–Ω—ñ—à–∏–π —Å–ø–æ—Å—ñ–± –∑–Ω–µ–∑–∞—Ä–∞–∂–µ–Ω–Ω—è."
    },
    "forest_3_wrong": {
        "title": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä",
        "description": "–ù–∞ –∂–∞–ª—å, —Ü–µ –Ω–µ –Ω–∞–π–±–µ–∑–ø–µ—á–Ω—ñ—à–µ —Ä—ñ—à–µ–Ω–Ω—è —â–æ–¥–æ –≤–æ–¥–∏ –≤ –ª—ñ—Å—ñ.",
        "options": [
            ("‚Ü©Ô∏è –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑", "forest_3"),
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
        ],
    },
    "forest_result": {
        "title": "–†–µ–∑—É–ª—å—Ç–∞—Ç: –í–∏–∂–∏–≤–∞–Ω–Ω—è –≤ –ª—ñ—Å—ñ",
        "description": "–í—ñ—Ç–∞—î–º–æ! –¢–∏ –Ω–∞–±—Ä–∞–≤ 3 –±–∞–ª–∏: —É—Å–ø—ñ—à–Ω–æ –≤–∏–∂–∏–≤ —É –ª—ñ—Å—ñ, –¥–æ—á–µ–∫–∞–≤—Å—è –ø–æ—Ä—è—Ç—É–Ω–∫—É.\n\n–¢–∏ –∑—Ä–æ–±–∏–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ –∫—Ä–æ–∫–∏:\n1. –ó—É–ø–∏–Ω–∏–≤—Å—è —ñ –æ—Ü—ñ–Ω–∏–≤ —Å–∏—Ç—É–∞—Ü—ñ—é, –Ω–µ –ø–∞–Ω—ñ–∫—É—é—á–∏\n2. –ü—ñ–¥–≥–æ—Ç—É–≤–∞–≤—Å—è –¥–æ –Ω–æ—á—ñ–≤–ª—ñ, –∑–±–µ—Ä—ñ–≥–∞—é—á–∏ —Ç–µ–ø–ª–æ\n3. –ë–µ–∑–ø–µ—á–Ω–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–≤ –∑–Ω–∞–π–¥–µ–Ω—É –≤–æ–¥—É",
        "options": [
            ("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", "start"),
            ("üîÑ –ü—Ä–æ–π—Ç–∏ —â–µ —Ä–∞–∑", "forest_1"),
        ],
        "score": 3
    },
}

# Define scenario names for results display
SCENARIO_NAMES = {
    "desert": "–ü—É—Å—Ç–µ–ª—è",
    "mountain": "–ì–æ—Ä–∏",
    "apocalypse": "–ê–ø–æ–∫–∞–ª—ñ–ø—Å–∏—Å",
    "forest": "–õ—ñ—Å"
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Send message on `/start`."""
    scenario = SCENARIOS["start"]
    # Use a 2-column layout for better button spacing
    keyboard = []
    row = []
    
    for i, (text, data) in enumerate(scenario["options"]):
        row.append(InlineKeyboardButton(text, callback_data=data))
        if i % 2 == 1 or i == len(scenario["options"]) - 1:
            keyboard.append(row)
            row = []
    
    # Add additional buttons in their own rows
    keyboard.append([InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏", callback_data="results")])
    keyboard.append([InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", callback_data="reset")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"*{scenario['title']}*\n\n{scenario['description']}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Reset progress and start over."""
    user_id = update.effective_user.id
    if user_id in user_scores:
        del user_scores[user_id]
    
    await update.message.reply_text("–¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å —Å–∫–∏–Ω—É—Ç–æ! –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.")
    await start(update, context)

async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Show user's results for all completed scenarios."""
    user_id = update.effective_user.id
    
    if user_id not in user_scores or not user_scores[user_id]:
        # No results yet
        await update.callback_query.message.reply_text(
            "*–¢–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏*\n\n–¢–∏ —â–µ –Ω–µ –ø—Ä–æ–π—à–æ–≤ –∂–æ–¥–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä—ñ—é. –°–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å—Ü–µ–Ω–∞—Ä—ñ–π!",
            parse_mode="Markdown"
        )
        return
    
    results_text = "*–¢–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏*\n\n"
    
    for scenario, score in user_scores[user_id].items():
        scenario_name = SCENARIO_NAMES.get(scenario, scenario)
        results_text += f"üéØ *{scenario_name}*: {score}/3 –±–∞–ª–∏\n"
    
    # Add a return to main menu button
    keyboard = [[InlineKeyboardButton("üè† –î–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é", callback_data="start")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.message.reply_text(
        results_text,
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle any message that isn't a command."""
    # Redirect to start command for any text input
    await start(update, context)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Handle button callbacks."""
    query = update.callback_query
    await query.answer()
    user_id = update.effective_user.id
    
    # Initialize user scores if not exists
    if user_id not in user_scores:
        user_scores[user_id] = {}
    
    # Check special callbacks
    if query.data == "reset":
        if user_id in user_scores:
            del user_scores[user_id]
        
        await query.message.reply_text("–¢–≤—ñ–π –ø—Ä–æ–≥—Ä–µ—Å —Å–∫–∏–Ω—É—Ç–æ! –ü–æ—á–Ω–µ–º–æ —Å–ø–æ—á–∞—Ç–∫—É.")
        scenario = SCENARIOS["start"]
        keyboard = []
        row = []
        
        for i, (text, data) in enumerate(scenario["options"]):
            row.append(InlineKeyboardButton(text, callback_data=data))
            if i % 2 == 1 or i == len(scenario["options"]) - 1:
                keyboard.append(row)
                row = []
        
        keyboard.append([InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏", callback_data="results")])
        keyboard.append([InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", callback_data="reset")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            f"*{scenario['title']}*\n\n{scenario['description']}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # Check if this is a results request
    if query.data == "results":
        await show_results(update, context)
        return
    
    # Special case for returning to start
    if query.data == "start":
        scenario = SCENARIOS["start"]
        keyboard = []
        row = []
        
        for i, (text, data) in enumerate(scenario["options"]):
            row.append(InlineKeyboardButton(text, callback_data=data))
            if i % 2 == 1 or i == len(scenario["options"]) - 1:
                keyboard.append(row)
                row = []
        
        keyboard.append([InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏", callback_data="results")])
        keyboard.append([InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", callback_data="reset")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.reply_text(
            f"*{scenario['title']}*\n\n{scenario['description']}",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
        return
    
    # Get scenario from callback data
    scenario_key = query.data
    
    # Verify the scenario exists
    if scenario_key not in SCENARIOS:
        logger.error(f"–ù–µ–≤—ñ–¥–æ–º–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π: {scenario_key}")
        await query.message.reply_text(
            "–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –∞–±–æ –ø–æ—á–Ω—ñ—Ç—å –∑ –ø–æ—á–∞—Ç–∫—É –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /start"
        )
        return
    
    scenario = SCENARIOS[scenario_key]
    
    # Check if this is a result scenario to update user scores
    if scenario_key.endswith("_result"):
        # Extract scenario base name (e.g., "desert" from "desert_result")
        scenario_base = scenario_key.split("_")[0]
        # Save the score
        user_scores[user_id][scenario_base] = scenario.get("score", 3)  # Default to 3 if score is not specified
    
    # Create keyboard from options
    keyboard = []
    for text, data in scenario["options"]:
        keyboard.append([InlineKeyboardButton(text, callback_data=data)])
    
    # Add additional buttons
    if not scenario_key.endswith("_wrong"):  # Don't show results button on wrong screens
        keyboard.append([InlineKeyboardButton("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏", callback_data="results")])
    
    keyboard.append([InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", callback_data="reset")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Format the message based on scenario content
    message_text = f"*{scenario['title']}*\n\n"
    if "description" in scenario:
        message_text += f"{scenario['description']}\n\n"
    if "question" in scenario:
        message_text += f"{scenario['question']}\n\n"
        
        # Add timer information if this is a question (not a wrong or result page)
        if not query.data.endswith("_wrong") and not query.data.endswith("_result"):
            message_text += f"‚è±Ô∏è *–ú–∞—î—à {QUESTION_TIME_LIMIT} —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å*\n\n"
    
    if "explanation" in scenario:
        message_text += f"_–ü–æ—è—Å–Ω–µ–Ω–Ω—è: {scenario['explanation']}_"
    
    try:
        await query.edit_message_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {e}")
        # Try sending a new message instead
        await query.message.reply_text(
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

# Simplified time-up callback without job handling complexity
async def time_up_callback(context: ContextTypes.DEFAULT_TYPE) -> None:
    """Called when the timer for a question expires."""
    job_data = context.job.data
    chat_id = job_data["chat_id"]
    message_id = job_data["message_id"]
    question = job_data["question"]
    
    # Get the corresponding _wrong destination
    wrong_destination = f"{question}_wrong"
    
    # Check if the wrong destination exists, otherwise go to start
    if wrong_destination not in SCENARIOS:
        wrong_destination = "start"
    
    # Get the wrong scenario
    scenario = SCENARIOS[wrong_destination]
    
    # Create keyboard from options
    keyboard = []
    for text, data in scenario["options"]:
        keyboard.append([InlineKeyboardButton(text, callback_data=data)])
    
    # Add reset button
    keyboard.append([InlineKeyboardButton("üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å", callback_data="reset")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # Format the message
    message_text = f"*{scenario['title']}*\n\n"
    message_text += "‚è±Ô∏è *–ß–∞—Å –≤–∏–π—à–æ–≤!* –¢–∏ –Ω–µ –≤—Å—Ç–∏–≥ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –≤—á–∞—Å–Ω–æ.\n\n"
    if "description" in scenario:
        message_text += f"{scenario['description']}\n\n"
    
    try:
        await context.bot.edit_message_text(
            chat_id=chat_id,
            message_id=message_id,
            text=message_text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"Error sending time up message: {e}")
        # Try to send a new message if edit fails
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
        except:
            pass

def main() -> None:
    """Start the bot."""
    # Create the Application
    application = Application.builder().token("7598948681:AAHcFldyo1IhYlZPfGQ4JROZIRL94EwoUY0").build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("reset", reset))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Run the bot until the user presses Ctrl-C
    application.run_polling()

if __name__ == "__main__":
    main()
